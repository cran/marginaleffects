% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_cco.R
\name{plot_cco}
\alias{plot_cco}
\title{Plot Conditional Contrasts}
\usage{
plot_cco(
  model,
  effect = NULL,
  condition = NULL,
  type = "response",
  vcov = NULL,
  conf_level = 0.95,
  transform_pre = "difference",
  transform_post = NULL,
  draw = TRUE,
  ...
)
}
\arguments{
\item{model}{Model object}

\item{effect}{Name of the variable whose contrast we want to plot on the y-axis}

\item{condition}{String or vector of two strings. The first is a variable
name to be displayed on the x-axis. The second is a variable whose values
will be displayed in different colors.}

\item{type}{string indicates the type (scale) of the predictions used to
compute marginal effects or contrasts. This can differ based on the model
type, but will typically be a string such as: "response", "link", "probs",
or "zero". When an unsupported string is entered, the model-specific list of
acceptable values is returned in an error message.}

\item{vcov}{Type of uncertainty estimates to report (e.g., for robust standard errors). Acceptable values:
\itemize{
\item FALSE: Do not compute standard errors. This can speed up computation considerably.
\item TRUE: Unit-level standard errors using the default \code{vcov(model)} variance-covariance matrix.
\item String which indicates the kind of uncertainty estimates to return.
\itemize{
\item Heteroskedasticity-consistent: \code{"HC"}, \code{"HC0"}, \code{"HC1"}, \code{"HC2"}, \code{"HC3"}, \code{"HC4"}, \code{"HC4m"}, \code{"HC5"}. See \code{?sandwich::vcovHC}
\item Heteroskedasticity and autocorrelation consistent: \code{"HAC"}
\item Other: \code{"NeweyWest"}, \code{"KernHAC"}, \code{"OPG"}. See the \code{sandwich} package documentation.
}
\item One-sided formula which indicates the name of cluster variables (e.g., \code{~unit_id}). This formula is passed to the \code{cluster} argument of the \code{sandwich::vcovCL} function.
\item Square covariance matrix
\item Function which returns a covariance matrix (e.g., \code{stats::vcov(model)})
}}

\item{conf_level}{numeric value between 0 and 1. Confidence level to use to build a confidence interval.}

\item{transform_pre}{(experimental) string or function. How should pairs of adjusted predictions be contrasted?
\itemize{
\item string: shortcuts to common contrast functions.
\itemize{
\item "difference" (default): \code{function(hi, lo) hi - lo}
\item "differenceavg": \code{function(hi, lo) mean(hi) - mean(lo)}
\item "ratio": \code{function(hi, lo) hi / lo}
\item "lnratio": \code{function(hi, lo) log(hi / lo)}
\item "ratioavg": \code{function(hi, lo) mean(hi) / mean(lo)}
\item "lnratioavg": \code{function(hi, lo) log(mean(hi) / mean(lo))}
\item "lnoravg": \code{function(hi, lo) log((mean(hi)/(1 - mean(hi))) / (mean(lo)/(1 - mean(lo))))}
\item "dydx": \code{function(hi, lo) (hi - lo) / eps}
\item "dydx": `function(hi, lo) mean((hi - lo) / eps)'
\item "expdydx": \code{function(hi, lo) ((exp(hi) - exp(lo)) / exp(e)) / e}
}
\item function: accept two equal-length numeric vectors of adjusted predictions (\code{hi} and \code{lo}) and returns a vector of contrasts of the same length, or a unique numeric value.
}}

\item{transform_post}{(experimental) A function applied to unit-level estimates and confidence intervals just before the function returns results.}

\item{draw}{\code{TRUE} returns a \code{ggplot2} plot. \code{FALSE} returns a \code{data.frame} of the underlying data.}

\item{...}{Additional arguments are passed to the \code{predict()} method
supplied by the modeling package.These arguments are particularly useful
for mixed-effects or bayesian models (see the online vignettes on the
\code{marginaleffects} website). Available arguments can vary from model to
model, depending on the range of supported arguments by each modeling
package. See the "Model-Specific Arguments" section of the
\code{?marginaleffects} documentation for a non-exhaustive list of available
arguments.}
}
\value{
A \code{ggplot2} object
}
\description{
This function plots contrasts (y-axis) against values of predictor(s)
variable(s) (x-axis and colors). This is especially useful in models with
interactions, where the values of contrasts depend on the values of
"condition" variables.
}
\examples{
mod <- lm(mpg ~ hp * wt, data = mtcars)
plot_cco(mod, effect = "hp", condition = "wt")

mod <- lm(mpg ~ hp * wt * am, data = mtcars)
plot_cco(mod, effect = "hp", condition = c("wt", "am"))

}
